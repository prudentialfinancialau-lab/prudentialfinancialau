# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  home(relativePath: String): Home!
  homeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomeFilter): HomeConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  lenders(relativePath: String): Lenders!
  lendersConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LendersFilter): LendersConnection!
  contact(relativePath: String): Contact!
  contactConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactFilter): ContactConnection!
}

input DocumentFilter {
  home: HomeFilter
  about: AboutFilter
  lenders: LendersFilter
  contact: ContactFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Home | About | Lenders | Contact | Folder

type HomeHero {
  breadcrumb: String
  title: String
  buttonText: String
  formTitle: String
  heroImage: String
}

type HomeAbout {
  label: String
  title: String
  paragraph1: String
  paragraph2: String
  quote: String
  quoteAuthor: String
  stat1Value: String
  stat1Label: String
  stat2Value: String
  stat2Label: String
  image: String
}

type HomeHelpFeatures {
  icon: String
  title: String
  description: String
}

type HomeHelp {
  title: String
  description: String
  statValue: String
  statLabel: String
  image: String
  features: [HomeHelpFeatures]
}

type HomeCalculator {
  title: String
  description: String
}

type HomeLendersLenderList {
  name: String
  logo: String
}

type HomeLenders {
  title: String
  description: String
  lenderList: [HomeLendersLenderList]
}

type HomeContact {
  title: String
  mapUrl: String
  location: String
}

type HomeNewsletter {
  title: String
}

type HomeHeader {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

type HomeFooterAddress {
  line1: String
  line2: String
  line3: String
}

type HomeFooter {
  logo: String
  description: String
  address: HomeFooterAddress
  email: String
  copyright: String
}

type Home implements Node & Document {
  hero: HomeHero
  about: HomeAbout
  help: HomeHelp
  calculator: HomeCalculator
  lenders: HomeLenders
  contact: HomeContact
  newsletter: HomeNewsletter
  header: HomeHeader
  footer: HomeFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HomeHeroFilter {
  breadcrumb: StringFilter
  title: StringFilter
  buttonText: StringFilter
  formTitle: StringFilter
  heroImage: ImageFilter
}

input HomeAboutFilter {
  label: StringFilter
  title: StringFilter
  paragraph1: StringFilter
  paragraph2: StringFilter
  quote: StringFilter
  quoteAuthor: StringFilter
  stat1Value: StringFilter
  stat1Label: StringFilter
  stat2Value: StringFilter
  stat2Label: StringFilter
  image: ImageFilter
}

input HomeHelpFeaturesFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input HomeHelpFilter {
  title: StringFilter
  description: StringFilter
  statValue: StringFilter
  statLabel: StringFilter
  image: ImageFilter
  features: HomeHelpFeaturesFilter
}

input HomeCalculatorFilter {
  title: StringFilter
  description: StringFilter
}

input HomeLendersLenderListFilter {
  name: StringFilter
  logo: ImageFilter
}

input HomeLendersFilter {
  title: StringFilter
  description: StringFilter
  lenderList: HomeLendersLenderListFilter
}

input HomeContactFilter {
  title: StringFilter
  mapUrl: StringFilter
  location: StringFilter
}

input HomeNewsletterFilter {
  title: StringFilter
}

input HomeHeaderFilter {
  phone: StringFilter
  email: StringFilter
  logo: ImageFilter
  facebookUrl: StringFilter
  twitterUrl: StringFilter
  linkedinUrl: StringFilter
  youtubeUrl: StringFilter
}

input HomeFooterAddressFilter {
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
}

input HomeFooterFilter {
  logo: ImageFilter
  description: StringFilter
  address: HomeFooterAddressFilter
  email: StringFilter
  copyright: StringFilter
}

input HomeFilter {
  hero: HomeHeroFilter
  about: HomeAboutFilter
  help: HomeHelpFilter
  calculator: HomeCalculatorFilter
  lenders: HomeLendersFilter
  contact: HomeContactFilter
  newsletter: HomeNewsletterFilter
  header: HomeHeaderFilter
  footer: HomeFooterFilter
}

type HomeConnectionEdges {
  cursor: String!
  node: Home
}

type HomeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type AboutAbout {
  label: String
  title: String
  paragraph1: String
  paragraph2: String
  quote: String
  quoteAuthor: String
  stat1Value: String
  stat1Label: String
  stat2Value: String
  stat2Label: String
  image: String
}

type AboutHelpFeatures {
  icon: String
  title: String
  description: String
}

type AboutHelp {
  title: String
  description: String
  statValue: String
  statLabel: String
  image: String
  features: [AboutHelpFeatures]
}

type AboutHeader {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

type AboutFooterAddress {
  line1: String
  line2: String
  line3: String
}

type AboutFooter {
  logo: String
  description: String
  address: AboutFooterAddress
  email: String
  copyright: String
}

type About implements Node & Document {
  about: AboutAbout
  help: AboutHelp
  header: AboutHeader
  footer: AboutFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutAboutFilter {
  label: StringFilter
  title: StringFilter
  paragraph1: StringFilter
  paragraph2: StringFilter
  quote: StringFilter
  quoteAuthor: StringFilter
  stat1Value: StringFilter
  stat1Label: StringFilter
  stat2Value: StringFilter
  stat2Label: StringFilter
  image: ImageFilter
}

input AboutHelpFeaturesFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input AboutHelpFilter {
  title: StringFilter
  description: StringFilter
  statValue: StringFilter
  statLabel: StringFilter
  image: ImageFilter
  features: AboutHelpFeaturesFilter
}

input AboutHeaderFilter {
  phone: StringFilter
  email: StringFilter
  logo: ImageFilter
  facebookUrl: StringFilter
  twitterUrl: StringFilter
  linkedinUrl: StringFilter
  youtubeUrl: StringFilter
}

input AboutFooterAddressFilter {
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
}

input AboutFooterFilter {
  logo: ImageFilter
  description: StringFilter
  address: AboutFooterAddressFilter
  email: StringFilter
  copyright: StringFilter
}

input AboutFilter {
  about: AboutAboutFilter
  help: AboutHelpFilter
  header: AboutHeaderFilter
  footer: AboutFooterFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type LendersLendersLenderList {
  name: String
  logo: String
}

type LendersLenders {
  title: String
  description: String
  lenderList: [LendersLendersLenderList]
}

type LendersCalculator {
  title: String
  description: String
}

type LendersHeader {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

type LendersFooterAddress {
  line1: String
  line2: String
  line3: String
}

type LendersFooter {
  logo: String
  description: String
  address: LendersFooterAddress
  email: String
  copyright: String
}

type Lenders implements Node & Document {
  lenders: LendersLenders
  calculator: LendersCalculator
  header: LendersHeader
  footer: LendersFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input LendersLendersLenderListFilter {
  name: StringFilter
  logo: ImageFilter
}

input LendersLendersFilter {
  title: StringFilter
  description: StringFilter
  lenderList: LendersLendersLenderListFilter
}

input LendersCalculatorFilter {
  title: StringFilter
  description: StringFilter
}

input LendersHeaderFilter {
  phone: StringFilter
  email: StringFilter
  logo: ImageFilter
  facebookUrl: StringFilter
  twitterUrl: StringFilter
  linkedinUrl: StringFilter
  youtubeUrl: StringFilter
}

input LendersFooterAddressFilter {
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
}

input LendersFooterFilter {
  logo: ImageFilter
  description: StringFilter
  address: LendersFooterAddressFilter
  email: StringFilter
  copyright: StringFilter
}

input LendersFilter {
  lenders: LendersLendersFilter
  calculator: LendersCalculatorFilter
  header: LendersHeaderFilter
  footer: LendersFooterFilter
}

type LendersConnectionEdges {
  cursor: String!
  node: Lenders
}

type LendersConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LendersConnectionEdges]
}

type ContactContact {
  title: String
  mapUrl: String
  location: String
}

type ContactHeader {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

type ContactFooterAddress {
  line1: String
  line2: String
  line3: String
}

type ContactFooter {
  logo: String
  description: String
  address: ContactFooterAddress
  email: String
  copyright: String
}

type Contact implements Node & Document {
  contact: ContactContact
  header: ContactHeader
  footer: ContactFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactContactFilter {
  title: StringFilter
  mapUrl: StringFilter
  location: StringFilter
}

input ContactHeaderFilter {
  phone: StringFilter
  email: StringFilter
  logo: ImageFilter
  facebookUrl: StringFilter
  twitterUrl: StringFilter
  linkedinUrl: StringFilter
  youtubeUrl: StringFilter
}

input ContactFooterAddressFilter {
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
}

input ContactFooterFilter {
  logo: ImageFilter
  description: StringFilter
  address: ContactFooterAddressFilter
  email: StringFilter
  copyright: StringFilter
}

input ContactFilter {
  contact: ContactContactFilter
  header: ContactHeaderFilter
  footer: ContactFooterFilter
}

type ContactConnectionEdges {
  cursor: String!
  node: Contact
}

type ContactConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHome(relativePath: String!, params: HomeMutation!): Home!
  createHome(relativePath: String!, params: HomeMutation!): Home!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateLenders(relativePath: String!, params: LendersMutation!): Lenders!
  createLenders(relativePath: String!, params: LendersMutation!): Lenders!
  updateContact(relativePath: String!, params: ContactMutation!): Contact!
  createContact(relativePath: String!, params: ContactMutation!): Contact!
}

input DocumentUpdateMutation {
  home: HomeMutation
  about: AboutMutation
  lenders: LendersMutation
  contact: ContactMutation
  relativePath: String
}

input DocumentMutation {
  home: HomeMutation
  about: AboutMutation
  lenders: LendersMutation
  contact: ContactMutation
}

input HomeHeroMutation {
  breadcrumb: String
  title: String
  buttonText: String
  formTitle: String
  heroImage: String
}

input HomeAboutMutation {
  label: String
  title: String
  paragraph1: String
  paragraph2: String
  quote: String
  quoteAuthor: String
  stat1Value: String
  stat1Label: String
  stat2Value: String
  stat2Label: String
  image: String
}

input HomeHelpFeaturesMutation {
  icon: String
  title: String
  description: String
}

input HomeHelpMutation {
  title: String
  description: String
  statValue: String
  statLabel: String
  image: String
  features: [HomeHelpFeaturesMutation]
}

input HomeCalculatorMutation {
  title: String
  description: String
}

input HomeLendersLenderListMutation {
  name: String
  logo: String
}

input HomeLendersMutation {
  title: String
  description: String
  lenderList: [HomeLendersLenderListMutation]
}

input HomeContactMutation {
  title: String
  mapUrl: String
  location: String
}

input HomeNewsletterMutation {
  title: String
}

input HomeHeaderMutation {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

input HomeFooterAddressMutation {
  line1: String
  line2: String
  line3: String
}

input HomeFooterMutation {
  logo: String
  description: String
  address: HomeFooterAddressMutation
  email: String
  copyright: String
}

input HomeMutation {
  hero: HomeHeroMutation
  about: HomeAboutMutation
  help: HomeHelpMutation
  calculator: HomeCalculatorMutation
  lenders: HomeLendersMutation
  contact: HomeContactMutation
  newsletter: HomeNewsletterMutation
  header: HomeHeaderMutation
  footer: HomeFooterMutation
}

input AboutAboutMutation {
  label: String
  title: String
  paragraph1: String
  paragraph2: String
  quote: String
  quoteAuthor: String
  stat1Value: String
  stat1Label: String
  stat2Value: String
  stat2Label: String
  image: String
}

input AboutHelpFeaturesMutation {
  icon: String
  title: String
  description: String
}

input AboutHelpMutation {
  title: String
  description: String
  statValue: String
  statLabel: String
  image: String
  features: [AboutHelpFeaturesMutation]
}

input AboutHeaderMutation {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

input AboutFooterAddressMutation {
  line1: String
  line2: String
  line3: String
}

input AboutFooterMutation {
  logo: String
  description: String
  address: AboutFooterAddressMutation
  email: String
  copyright: String
}

input AboutMutation {
  about: AboutAboutMutation
  help: AboutHelpMutation
  header: AboutHeaderMutation
  footer: AboutFooterMutation
}

input LendersLendersLenderListMutation {
  name: String
  logo: String
}

input LendersLendersMutation {
  title: String
  description: String
  lenderList: [LendersLendersLenderListMutation]
}

input LendersCalculatorMutation {
  title: String
  description: String
}

input LendersHeaderMutation {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

input LendersFooterAddressMutation {
  line1: String
  line2: String
  line3: String
}

input LendersFooterMutation {
  logo: String
  description: String
  address: LendersFooterAddressMutation
  email: String
  copyright: String
}

input LendersMutation {
  lenders: LendersLendersMutation
  calculator: LendersCalculatorMutation
  header: LendersHeaderMutation
  footer: LendersFooterMutation
}

input ContactContactMutation {
  title: String
  mapUrl: String
  location: String
}

input ContactHeaderMutation {
  phone: String
  email: String
  logo: String
  facebookUrl: String
  twitterUrl: String
  linkedinUrl: String
  youtubeUrl: String
}

input ContactFooterAddressMutation {
  line1: String
  line2: String
  line3: String
}

input ContactFooterMutation {
  logo: String
  description: String
  address: ContactFooterAddressMutation
  email: String
  copyright: String
}

input ContactMutation {
  contact: ContactContactMutation
  header: ContactHeaderMutation
  footer: ContactFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
