# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Folder

type PageHero {
  breadcrumb: String
  title: String
  buttonText: String
  formTitle: String
  heroImage: String
}

type PageAbout {
  label: String
  title: String
  paragraph1: String
  paragraph2: String
  quote: String
  quoteAuthor: String
  stat1Value: String
  stat1Label: String
  stat2Value: String
  stat2Label: String
  image: String
}

type PageHelpFeatures {
  icon: String
  title: String
  description: String
}

type PageHelp {
  title: String
  description: String
  statValue: String
  statLabel: String
  image: String
  features: [PageHelpFeatures]
}

type PageLendersLenderList {
  name: String
  logo: String
}

type PageLenders {
  title: String
  description: String
  lenderList: [PageLendersLenderList]
}

type PageContact {
  title: String
  mapUrl: String
  location: String
}

type PageNewsletter {
  title: String
}

type PageHeader {
  phone: String
  email: String
  logo: String
}

type PageFooterAddress {
  line1: String
  line2: String
  line3: String
}

type PageFooter {
  description: String
  address: PageFooterAddress
  email: String
  copyright: String
}

type Page implements Node & Document {
  hero: PageHero
  about: PageAbout
  help: PageHelp
  lenders: PageLenders
  contact: PageContact
  newsletter: PageNewsletter
  header: PageHeader
  footer: PageFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageHeroFilter {
  breadcrumb: StringFilter
  title: StringFilter
  buttonText: StringFilter
  formTitle: StringFilter
  heroImage: ImageFilter
}

input PageAboutFilter {
  label: StringFilter
  title: StringFilter
  paragraph1: StringFilter
  paragraph2: StringFilter
  quote: StringFilter
  quoteAuthor: StringFilter
  stat1Value: StringFilter
  stat1Label: StringFilter
  stat2Value: StringFilter
  stat2Label: StringFilter
  image: ImageFilter
}

input PageHelpFeaturesFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input PageHelpFilter {
  title: StringFilter
  description: StringFilter
  statValue: StringFilter
  statLabel: StringFilter
  image: ImageFilter
  features: PageHelpFeaturesFilter
}

input PageLendersLenderListFilter {
  name: StringFilter
  logo: ImageFilter
}

input PageLendersFilter {
  title: StringFilter
  description: StringFilter
  lenderList: PageLendersLenderListFilter
}

input PageContactFilter {
  title: StringFilter
  mapUrl: StringFilter
  location: StringFilter
}

input PageNewsletterFilter {
  title: StringFilter
}

input PageHeaderFilter {
  phone: StringFilter
  email: StringFilter
  logo: StringFilter
}

input PageFooterAddressFilter {
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
}

input PageFooterFilter {
  description: StringFilter
  address: PageFooterAddressFilter
  email: StringFilter
  copyright: StringFilter
}

input PageFilter {
  hero: PageHeroFilter
  about: PageAboutFilter
  help: PageHelpFilter
  lenders: PageLendersFilter
  contact: PageContactFilter
  newsletter: PageNewsletterFilter
  header: PageHeaderFilter
  footer: PageFooterFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
}

input PageHeroMutation {
  breadcrumb: String
  title: String
  buttonText: String
  formTitle: String
  heroImage: String
}

input PageAboutMutation {
  label: String
  title: String
  paragraph1: String
  paragraph2: String
  quote: String
  quoteAuthor: String
  stat1Value: String
  stat1Label: String
  stat2Value: String
  stat2Label: String
  image: String
}

input PageHelpFeaturesMutation {
  icon: String
  title: String
  description: String
}

input PageHelpMutation {
  title: String
  description: String
  statValue: String
  statLabel: String
  image: String
  features: [PageHelpFeaturesMutation]
}

input PageLendersLenderListMutation {
  name: String
  logo: String
}

input PageLendersMutation {
  title: String
  description: String
  lenderList: [PageLendersLenderListMutation]
}

input PageContactMutation {
  title: String
  mapUrl: String
  location: String
}

input PageNewsletterMutation {
  title: String
}

input PageHeaderMutation {
  phone: String
  email: String
  logo: String
}

input PageFooterAddressMutation {
  line1: String
  line2: String
  line3: String
}

input PageFooterMutation {
  description: String
  address: PageFooterAddressMutation
  email: String
  copyright: String
}

input PageMutation {
  hero: PageHeroMutation
  about: PageAboutMutation
  help: PageHelpMutation
  lenders: PageLendersMutation
  contact: PageContactMutation
  newsletter: PageNewsletterMutation
  header: PageHeaderMutation
  footer: PageFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
